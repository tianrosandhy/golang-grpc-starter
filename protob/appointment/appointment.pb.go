// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.4
// source: appointment.proto

package appointment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetAppointmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppointmentId   string `protobuf:"bytes,1,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id,omitempty"`
	AppointmentCode string `protobuf:"bytes,2,opt,name=appointment_code,json=appointmentCode,proto3" json:"appointment_code,omitempty"`
}

func (x *GetAppointmentRequest) Reset() {
	*x = GetAppointmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appointment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppointmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppointmentRequest) ProtoMessage() {}

func (x *GetAppointmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_appointment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppointmentRequest.ProtoReflect.Descriptor instead.
func (*GetAppointmentRequest) Descriptor() ([]byte, []int) {
	return file_appointment_proto_rawDescGZIP(), []int{0}
}

func (x *GetAppointmentRequest) GetAppointmentId() string {
	if x != nil {
		return x.AppointmentId
	}
	return ""
}

func (x *GetAppointmentRequest) GetAppointmentCode() string {
	if x != nil {
		return x.AppointmentCode
	}
	return ""
}

type AppointmentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppointmentId   string `protobuf:"bytes,1,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id,omitempty"`
	AppointmentCode string `protobuf:"bytes,2,opt,name=appointment_code,json=appointmentCode,proto3" json:"appointment_code,omitempty"`
	PatientId       string `protobuf:"bytes,3,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	Email           string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *AppointmentData) Reset() {
	*x = AppointmentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appointment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentData) ProtoMessage() {}

func (x *AppointmentData) ProtoReflect() protoreflect.Message {
	mi := &file_appointment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentData.ProtoReflect.Descriptor instead.
func (*AppointmentData) Descriptor() ([]byte, []int) {
	return file_appointment_proto_rawDescGZIP(), []int{1}
}

func (x *AppointmentData) GetAppointmentId() string {
	if x != nil {
		return x.AppointmentId
	}
	return ""
}

func (x *AppointmentData) GetAppointmentCode() string {
	if x != nil {
		return x.AppointmentCode
	}
	return ""
}

func (x *AppointmentData) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *AppointmentData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type AppointmentDataCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AppointmentData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AppointmentDataCollection) Reset() {
	*x = AppointmentDataCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appointment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentDataCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentDataCollection) ProtoMessage() {}

func (x *AppointmentDataCollection) ProtoReflect() protoreflect.Message {
	mi := &file_appointment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentDataCollection.ProtoReflect.Descriptor instead.
func (*AppointmentDataCollection) Descriptor() ([]byte, []int) {
	return file_appointment_proto_rawDescGZIP(), []int{2}
}

func (x *AppointmentDataCollection) GetData() []*AppointmentData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_appointment_proto protoreflect.FileDescriptor

var file_appointment_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x22, 0x69, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x48, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xff, 0x01, 0x0a, 0x0b,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x50,
	0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42, 0x14, 0x5a,
	0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_appointment_proto_rawDescOnce sync.Once
	file_appointment_proto_rawDescData = file_appointment_proto_rawDesc
)

func file_appointment_proto_rawDescGZIP() []byte {
	file_appointment_proto_rawDescOnce.Do(func() {
		file_appointment_proto_rawDescData = protoimpl.X.CompressGZIP(file_appointment_proto_rawDescData)
	})
	return file_appointment_proto_rawDescData
}

var file_appointment_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_appointment_proto_goTypes = []interface{}{
	(*GetAppointmentRequest)(nil),     // 0: protoc.GetAppointmentRequest
	(*AppointmentData)(nil),           // 1: protoc.AppointmentData
	(*AppointmentDataCollection)(nil), // 2: protoc.AppointmentDataCollection
}
var file_appointment_proto_depIdxs = []int32{
	1, // 0: protoc.AppointmentDataCollection.data:type_name -> protoc.AppointmentData
	1, // 1: protoc.Appointment.PostAppointment:input_type -> protoc.AppointmentData
	0, // 2: protoc.Appointment.GetSingleAppointment:input_type -> protoc.GetAppointmentRequest
	0, // 3: protoc.Appointment.GetAllAppointment:input_type -> protoc.GetAppointmentRequest
	1, // 4: protoc.Appointment.PostAppointment:output_type -> protoc.AppointmentData
	1, // 5: protoc.Appointment.GetSingleAppointment:output_type -> protoc.AppointmentData
	2, // 6: protoc.Appointment.GetAllAppointment:output_type -> protoc.AppointmentDataCollection
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_appointment_proto_init() }
func file_appointment_proto_init() {
	if File_appointment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_appointment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppointmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appointment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appointment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentDataCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_appointment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_appointment_proto_goTypes,
		DependencyIndexes: file_appointment_proto_depIdxs,
		MessageInfos:      file_appointment_proto_msgTypes,
	}.Build()
	File_appointment_proto = out.File
	file_appointment_proto_rawDesc = nil
	file_appointment_proto_goTypes = nil
	file_appointment_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AppointmentClient is the client API for Appointment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppointmentClient interface {
	PostAppointment(ctx context.Context, in *AppointmentData, opts ...grpc.CallOption) (*AppointmentData, error)
	GetSingleAppointment(ctx context.Context, in *GetAppointmentRequest, opts ...grpc.CallOption) (*AppointmentData, error)
	GetAllAppointment(ctx context.Context, in *GetAppointmentRequest, opts ...grpc.CallOption) (*AppointmentDataCollection, error)
}

type appointmentClient struct {
	cc grpc.ClientConnInterface
}

func NewAppointmentClient(cc grpc.ClientConnInterface) AppointmentClient {
	return &appointmentClient{cc}
}

func (c *appointmentClient) PostAppointment(ctx context.Context, in *AppointmentData, opts ...grpc.CallOption) (*AppointmentData, error) {
	out := new(AppointmentData)
	err := c.cc.Invoke(ctx, "/protoc.Appointment/PostAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentClient) GetSingleAppointment(ctx context.Context, in *GetAppointmentRequest, opts ...grpc.CallOption) (*AppointmentData, error) {
	out := new(AppointmentData)
	err := c.cc.Invoke(ctx, "/protoc.Appointment/GetSingleAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentClient) GetAllAppointment(ctx context.Context, in *GetAppointmentRequest, opts ...grpc.CallOption) (*AppointmentDataCollection, error) {
	out := new(AppointmentDataCollection)
	err := c.cc.Invoke(ctx, "/protoc.Appointment/GetAllAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppointmentServer is the server API for Appointment service.
type AppointmentServer interface {
	PostAppointment(context.Context, *AppointmentData) (*AppointmentData, error)
	GetSingleAppointment(context.Context, *GetAppointmentRequest) (*AppointmentData, error)
	GetAllAppointment(context.Context, *GetAppointmentRequest) (*AppointmentDataCollection, error)
}

// UnimplementedAppointmentServer can be embedded to have forward compatible implementations.
type UnimplementedAppointmentServer struct {
}

func (*UnimplementedAppointmentServer) PostAppointment(context.Context, *AppointmentData) (*AppointmentData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAppointment not implemented")
}
func (*UnimplementedAppointmentServer) GetSingleAppointment(context.Context, *GetAppointmentRequest) (*AppointmentData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleAppointment not implemented")
}
func (*UnimplementedAppointmentServer) GetAllAppointment(context.Context, *GetAppointmentRequest) (*AppointmentDataCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAppointment not implemented")
}

func RegisterAppointmentServer(s *grpc.Server, srv AppointmentServer) {
	s.RegisterService(&_Appointment_serviceDesc, srv)
}

func _Appointment_PostAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServer).PostAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoc.Appointment/PostAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServer).PostAppointment(ctx, req.(*AppointmentData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Appointment_GetSingleAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServer).GetSingleAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoc.Appointment/GetSingleAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServer).GetSingleAppointment(ctx, req.(*GetAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Appointment_GetAllAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServer).GetAllAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoc.Appointment/GetAllAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServer).GetAllAppointment(ctx, req.(*GetAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Appointment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoc.Appointment",
	HandlerType: (*AppointmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostAppointment",
			Handler:    _Appointment_PostAppointment_Handler,
		},
		{
			MethodName: "GetSingleAppointment",
			Handler:    _Appointment_GetSingleAppointment_Handler,
		},
		{
			MethodName: "GetAllAppointment",
			Handler:    _Appointment_GetAllAppointment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appointment.proto",
}
